paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Creates a new user account with role-based access permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
                - phoneNumber
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
                  minLength: 6
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                phoneNumber:
                  type: string
                  example: '555-123-4567'
                  description: User's phone number
                roleId:
                  type: string
                  format: uuid
                  example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  description: Role ID to assign to the user. Either roleId or moduleAccess is required.
                  # moduleAccess:
                  #   type: object
                  #   description: Module access permissions for custom role creation. Either roleId or moduleAccess is required.
                  #   example:
                  #     {
                  #       'dashboard': 'no_access',
                  #       'projects': 'view_access',
                  #       'surveys': 'view_access',
                  #       'calendar': 'no_access',
                  #       'customers': 'edit_access',
                  #       'components': 'no_access',
                  #       'equipments': 'no_access',
                  #     }
                  # properties:
                  # dashboard:
                  #   $ref: '#/components/schemas/AccessLevel'
                  # projects:
                  #   $ref: '#/components/schemas/AccessLevel'
                  # surveys:
                  #   $ref: '#/components/schemas/AccessLevel'
                  # calendar:
                  #   $ref: '#/components/schemas/AccessLevel'
                  # customers:
                  #   $ref: '#/components/schemas/AccessLevel'
                  # components:
                  #   $ref: '#/components/schemas/AccessLevel'
                  # equipments:
                  #   $ref: '#/components/schemas/AccessLevel'
                  # facility:
                  #   $ref: '#/components/schemas/AccessLevel'
                  # roles:
                  #   $ref: '#/components/schemas/AccessLevel'
                  # reports:
                  #   $ref: '#/components/schemas/AccessLevel'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      description: Authenticates a user and returns a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/me:
    get:
      tags:
        - Auth
      summary: Get current user information
      description: Returns information about the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        format: uuid
                        example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      email:
                        type: string
                        format: email
                        example: user@example.com
                      role:
                        type: string
                        format: uuid
                        example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/refresh-token:
    post:
      tags:
        - Auth
      summary: Refresh authentication token
      description: Generates a new JWT token for the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Token refreshed successfully
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
