paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Returns a list of users with pagination (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      total:
                        type: integer
                        example: 42
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 5
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
                  minLength: 6
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                phoneNumber:
                  type: string
                  example: '555-123-4567'
                  description: User's phone number
                roleId:
                  type: string
                  format: uuid
                  example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  description: Role ID to assign to the user. Either roleId or moduleAccess is required.
                moduleAccess:
                  type: object
                  description: Module access permissions for custom role creation. Either roleId or moduleAccess is required.
                  example:
                    {
                      'dashboard': 'no_access',
                      'projects': 'view_access',
                      'surveys': 'view_access',
                      'calendar': 'no_access',
                      'customers': 'edit_access',
                      'components': 'no_access',
                      'equipments': 'no_access',
                    }
                  properties:
                    dashboard:
                      $ref: '#/components/schemas/AccessLevel'
                    projects:
                      $ref: '#/components/schemas/AccessLevel'
                    surveys:
                      $ref: '#/components/schemas/AccessLevel'
                    calendar:
                      $ref: '#/components/schemas/AccessLevel'
                    customers:
                      $ref: '#/components/schemas/AccessLevel'
                    components:
                      $ref: '#/components/schemas/AccessLevel'
                    equipments:
                      $ref: '#/components/schemas/AccessLevel'
                    facility:
                      $ref: '#/components/schemas/AccessLevel'
                    roles:
                      $ref: '#/components/schemas/AccessLevel'
                    reports:
                      $ref: '#/components/schemas/AccessLevel'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User created successfully
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Returns a single user by their ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Users
      summary: Update user
      description: Updates a user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                password:
                  type: string
                  format: password
                  example: Password123!
                  minLength: 6
                roleId:
                  type: string
                  format: uuid
                  example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  description: Role ID to assign to the user
                phoneNumber:
                  type: string
                  example: '555-123-4567'
                isDeleted:
                  type: boolean
                  example: false
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User updated successfully
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes a user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
